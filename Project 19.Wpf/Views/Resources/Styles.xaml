<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:a="clr-namespace:System.Windows.Media.Animation;assembly=Wpf"
                    xmlns:bi="https://github.com/helluvamatt/BootstrapIcons.Wpf/"
                    xmlns:c="clr-namespace:System.Windows.Controls;assembly=Wpf"
                    xmlns:s="clr-namespace:System;assembly=System.Runtime"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:fa="http://schemas.fontawesome.com/icons/svg"
                    xmlns:views="clr-namespace:Project_19.Views">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Brushes.xaml"/>
        <ResourceDictionary Source="Default/DefaultMenuItem.xaml"/>
        <ResourceDictionary Source="Default/DefaultDataGridRow.xaml"/>
    </ResourceDictionary.MergedDictionaries>


    <!---->
    <!---TOOLS-->
    <!---->


    <!--Converters-->
    <views:DoubleSumConverter x:Key="DoubleDiffConverter" Negate="True"/>
    <views:StringConcatConverter x:Key="TagConverter" Pre="[" Post="]"/>
    <views:BrushToColorConverter x:Key="BrushToColorConverter"/>
    <views:DoubleMltConverter x:Key="DoubleMltConverter"/>
    <views:DoubleSumConverter x:Key="DoubleSumConverter"/>
    <views:EqualityConverter x:Key="EqualityConverter"/>
    <views:BooleanInverter x:Key="BooleanInverter"/>

    <!--BAutoCollapsedElement-->
    <Style x:Key="BAutoCollapsedElement" TargetType="{x:Type FrameworkElement}">
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="Visibility" Value="Visible"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    <!---->
    <!---TEXT-->
    <!---->


    <!--BHeaderIconB-->
    <Style x:Key="BHeaderIconB" TargetType="{x:Type bi:BootstrapIcon}">
        <Setter Property="Foreground" Value="{StaticResource BBlack}"/>
        <Setter Property="Margin" Value="-1 -8 2 1"/>
        <Setter Property="Height" Value="24"/>
        <Setter Property="Width" Value="24"/>
    </Style>

    <!--BHeaderIconF-->
    <Style x:Key="BHeaderIconF" TargetType="{x:Type fa:ImageAwesome}">
        <Setter Property="PrimaryColor" Value="{StaticResource BBlack}"/>
        <Setter Property="Margin" Value="0 -7 3 1"/>
        <Setter Property="Height" Value="22"/>
        <Setter Property="Width" Value="22"/>
    </Style>

    <!--BHeaderIconSecF-->
    <Style x:Key="BHeaderIconSecF" TargetType="{x:Type fa:ImageAwesome}">
        <Setter Property="PrimaryColor" Value="{StaticResource BBgSecondary}"/>
    </Style>

    <!--BHeader-->
    <Style x:Key="BHeader" TargetType="{x:Type Label}">
        <Setter Property="Foreground" Value="{StaticResource BBlack}"/>
        <Setter Property="Margin" Value="0 -7 0 4"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="FontSize" Value="24"/>
    </Style>

    <!--BHeaderSec-->
    <Style x:Key="BHeaderSec" TargetType="{x:Type Label}">
        <Setter Property="Foreground" Value="{StaticResource BTextSecondary}"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="FontFamily" Value="Segoe UI Bold"/>
        <Setter Property="FontSize" Value="23"/>
    </Style>

    <!--BTagDForm-->
    <Style x:Key="BTagDForm" TargetType="{x:Type TextBlock}">
        <Style.Resources>
            <views:StringItemsConverter x:Key="ConcatConverter" Pre="•  " Post="&#x0a;"/>
        </Style.Resources>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Errors.Count}" Value="0">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </Style.Triggers>
        <Setter Property="Text" Value="{Binding Errors, Converter={StaticResource ConcatConverter}}"/>
        <Setter Property="Foreground" Value="{StaticResource BTextDanger}"/>
        <Setter Property="LineStackingStrategy" Value="BlockLineHeight"/>
        <Setter Property="Margin" Value="18 -1 0 19"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="LineHeight" Value="23"/>
        <Setter Property="FontSize" Value="16"/>
    </Style>

    <!--BTagSForm-->
    <Style x:Key="BTagSForm" TargetType="{x:Type DockPanel}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsSuccess}" Value="True">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
        </Style.Triggers>
        <Setter Property="Visibility" Value="Collapsed"/>
        <Setter Property="Margin" Value="8 -1 0 19"/>
    </Style>

    <!--BTagSFormText-->
    <Style x:Key="BTagSFormText" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{StaticResource BTextSuccess}"/>
        <Setter Property="LineStackingStrategy" Value="BlockLineHeight"/>
        <Setter Property="Margin" Value="5.5 0 0 0"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Text" Value="Password changed."/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="TextWrapping" Value="NoWrap"/>
        <Setter Property="LineHeight" Value="23"/>
        <Setter Property="FontSize" Value="16"/>
    </Style>

    <!--BTagSFormIcon-->
    <Style x:Key="BTagSFormIcon" TargetType="{x:Type bi:BootstrapIcon}">
        <Setter Property="Foreground" Value="{StaticResource BBgSuccess}"/>
        <Setter Property="Margin" Value="1 3.25 0 0"/>
        <Setter Property="Icon" Value="CheckCircleFill"/>
        <Setter Property="Height" Value="16"/>
        <Setter Property="Width" Value="16"/>
    </Style>

    <!--BTagDField-->
    <Style x:Key="BTagDField" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{StaticResource BTextDanger}"/>
        <Setter Property="Text" Value="{Binding ErrorContent}"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="FontSize" Value="16"/>
    </Style>

    <!--BTitle-->
    <Style x:Key="BTitle" TargetType="{x:Type Label}">
        <Setter Property="Foreground" Value="{StaticResource BBlack}"/>
        <Setter Property="Margin" Value="4 0.2 4 0"/>
        <Setter Property="Padding" Value="0 0 0 2"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="FontSize" Value="16"/>
    </Style>

    <!--BTitleSec-->
    <Style x:Key="BTitleSec" BasedOn="{StaticResource BHeaderSec}" TargetType="{x:Type Label}">
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="FontSize" Value="12.5"/>
    </Style>


    <!---->
    <!---DATA-INPUT-->
    <!---->


    <!--BBoxHeight-->
    <s:Double x:Key="BBoxHeight">46</s:Double>

    <!--BBoxValidatorTemplate-->
    <ControlTemplate x:Key="BBoxValidatorTemplate">
        <StackPanel>
            <AdornedElementPlaceholder/>
            <ItemsControl ItemsSource="{Binding}" Margin="4 -4 0 0" >
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <TextBlock Style="{StaticResource BTagDField}"/>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
        </StackPanel>
    </ControlTemplate>

    <!--BBox-->
    <Style x:Key="BBox" TargetType="{x:Type TextBox}">
        <Style.Resources>
            <Thickness x:Key="Margin" Left="0" Right="0" Top="-4" Bottom="-4"/>
            <Thickness x:Key="ErrorMargin" Left="0" Right="0" Top="-4" Bottom="19"/>
        </Style.Resources>
        <Style.Triggers>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource BBorderFocus}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="IsFocused" Value="False"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="BorderBrush" Value="{StaticResource BBorderOver}"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="Margin" Value="{StaticResource ErrorMargin}"></Setter>
            </Trigger>
            <Trigger Property="Validation.HasError" Value="False">
                <Setter Property="Margin" Value="{StaticResource Margin}"></Setter>
            </Trigger>
        </Style.Triggers>
        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource BBoxValidatorTemplate}"/>
        <Setter Property="BorderBrush" Value="{StaticResource BGrayBorderA}"/>
        <Setter Property="Height" Value="{StaticResource BBoxHeight}"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="Padding" Value="8 0 8 1"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Border x:Name="Halo" BorderThickness="4" CornerRadius="6" 
                            BorderBrush="{StaticResource BTransparent}"
                            Background="{Binding ElementName=Halo, Path=BorderBrush}">
                        <Border x:Name="Border" CornerRadius="5" Padding="2"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                Background="{StaticResource BWhite}">
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal" />
                                    <VisualState x:Name="Disabled">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledControlLightColor}"/>
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="ReadOnly">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledControlDarkColor}"/>
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="MouseOver" />
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <ScrollViewer Margin="0" x:Name="PART_ContentHost"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Halo" Property="BorderBrush">
                                <Setter.Value>
                                    <SolidColorBrush Opacity="0.25" Color="{Binding Source={StaticResource BBgPrimary}, 
                                        Converter={StaticResource BrushToColorConverter}}"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--BBoxP-->
    <Style x:Key="BBoxP" TargetType="{x:Type c:PassBox}">
        <Style.Resources>
            <Thickness x:Key="Margin" Left="0" Right="0" Top="-4" Bottom="-4"/>
            <Thickness x:Key="ErrorMargin" Left="0" Right="0" Top="-4" Bottom="19"/>
            <Style TargetType="{x:Type PasswordBox}">
                <Style.Triggers>
                    <Trigger Property="IsFocused" Value="True">
                        <Setter Property="BorderBrush" Value="{StaticResource BBorderFocus}"/>
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsMouseOver" Value="True"/>
                            <Condition Property="IsFocused" Value="False"/>
                        </MultiTrigger.Conditions>
                        <MultiTrigger.Setters>
                            <Setter Property="BorderBrush" Value="{StaticResource BBorderOver}"/>
                        </MultiTrigger.Setters>
                    </MultiTrigger>
                </Style.Triggers>
                <Setter Property="BorderBrush" Value="{StaticResource BGrayBorderA}"/>
                <Setter Property="Height" Value="{StaticResource BBoxHeight}"/>
                <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
                <Setter Property="HorizontalContentAlignment" Value="Left"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Padding" Value="8 0 8 2"/>
                <Setter Property="OverridesDefaultStyle" Value="True"/>
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="FontFamily" Value="Segoe UI"/>
                <Setter Property="AllowDrop" Value="true"/>
                <Setter Property="FontSize" Value="16"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type PasswordBox}">
                            <Border x:Name="Halo" BorderThickness="4" CornerRadius="6"
                                    BorderBrush="{StaticResource BTransparent}"
                                    Background="{Binding ElementName=Halo, Path=BorderBrush}">
                                <Border x:Name="Border" CornerRadius="5" Padding="2"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        Background="{StaticResource BWhite}">
                                    <VisualStateManager.VisualStateGroups>
                                        <VisualStateGroup x:Name="CommonStates">
                                            <VisualState x:Name="Normal"/>
                                            <VisualState x:Name="Disabled">
                                                <Storyboard>
                                                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                                        <EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledControlLightColor}"/>
                                                    </ColorAnimationUsingKeyFrames>
                                                </Storyboard>
                                            </VisualState>
                                            <VisualState x:Name="ReadOnly">
                                                <Storyboard>
                                                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                                        <EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledControlDarkColor}"/>
                                                    </ColorAnimationUsingKeyFrames>
                                                </Storyboard>
                                            </VisualState>
                                            <VisualState x:Name="MouseOver"/>
                                        </VisualStateGroup>
                                    </VisualStateManager.VisualStateGroups>

                                    <ScrollViewer Margin="0"  x:Name="PART_ContentHost"/>
                                </Border>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="PasswordBox.IsFocused" Value="True">
                                    <Setter TargetName="Halo" Property="BorderBrush">
                                        <Setter.Value>
                                            <SolidColorBrush Opacity="0.25" Color="{Binding Source={StaticResource BBgPrimary}, 
                                                Converter={StaticResource BrushToColorConverter}}"/>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.Resources>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="Margin" Value="{StaticResource ErrorMargin}"></Setter>
            </Trigger>
            <Trigger Property="Validation.HasError" Value="False">
                <Setter Property="Margin" Value="{StaticResource Margin}"></Setter>
            </Trigger>
        </Style.Triggers>
        <Setter Property="PasswordChar" Value='●'/>
        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource BBoxValidatorTemplate}"/>
        <Setter Property="ScrollViewer" Value="{Binding 
            RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ScrollViewer}}}"/>
    </Style>

    <!--BBoxC-->
    <Style x:Key="BBoxC" BasedOn="{StaticResource BAutoCollapsedElement}" TargetType="{x:Type ComboBox}">
        <Style.Resources>
            <DropShadowEffect x:Key="Shadow" BlurRadius="5" ShadowDepth="-1" Opacity="0.25" Direction="90"/>
            <ControlTemplate x:Key="ToggleButtonTemplate" TargetType="{x:Type ToggleButton}">
                <Border Background="{StaticResource BTransparent}" 
                        BorderThickness="0" 
                        CornerRadius="0">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="37"/>
                        </Grid.ColumnDefinitions>

                        <ContentPresenter Grid.Column="0"/>

                        <fa:ImageAwesome Grid.Column="1" Icon="Solid_ChevronDown"
                                         PrimaryColor="{StaticResource BTextDark}"
                                         VerticalAlignment="Center" HorizontalAlignment="Center" 
                                         Stretch="Fill" Width="10" Height="6"/>
                    </Grid>
                </Border>
            </ControlTemplate>
            <Style x:Key="ItemContainer" TargetType="{x:Type ComboBoxItem}">
                <Setter Property="BorderBrush" Value="{StaticResource BTransparent}"/>
                <Setter Property="Background" Value="{StaticResource BTransparent}"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Focusable" Value="False"/>
                <Setter Property="Height" Value="32"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                            <Border x:Name="Border" CornerRadius="2"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    Background="{TemplateBinding Background}">
                                <StackPanel Height="{TemplateBinding Height}"
                                            Margin="7  -1 8 0"
                                            Orientation="Horizontal">
                                    <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                    <Label Content="{Binding Title}" Width="100"/>
                                    <Label Content="{Binding BranchName}"/>
                                </StackPanel>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsHighlighted" Value="True">
                                    <Setter Property="Background" Value="{StaticResource BGraySelection}"/>
                                    <Setter Property="Foreground" Value="{StaticResource BBlack}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.Resources>
        <Style.Triggers>        
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource BBorderFocus}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="IsFocused" Value="False"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="BorderBrush" Value="{StaticResource BBorderOver}"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
        </Style.Triggers>
        <Setter Property="ItemContainerStyle" Value="{StaticResource ItemContainer}"/>
        <Setter Property="BorderBrush" Value="{StaticResource BGrayBorderA}"/>
        <Setter Property="Height" Value="{StaticResource BBoxHeight}"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="Padding" Value="8 0 8 1"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Border x:Name="Halo" BorderThickness="4" CornerRadius="6" 
                            BorderBrush="{StaticResource BTransparent}"
                            Background="{Binding ElementName=Halo, Path=BorderBrush}">
                        <Border x:Name="Border" CornerRadius="5" Padding="2"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                Background="{StaticResource BWhite}">

                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal" />
                                    <VisualState x:Name="Disabled">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" 
                                                                          Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledControlLightColor}"/>
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="ReadOnly">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" 
                                                                          Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledControlDarkColor}"/>
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="MouseOver" />
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>

                            <ToggleButton x:Name="ToggleButton"
                                          IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay,
                                            RelativeSource={RelativeSource TemplatedParent}}"
                                          Template="{StaticResource ToggleButtonTemplate}"
                                          Margin="0" ClickMode="Press" Focusable="False">
                                <Grid>
                                     <ContentPresenter Name="ContentSite"
                                                       ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                                       ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                                       VerticalAlignment="Center" HorizontalAlignment="Left"
                                                       Content="{TemplateBinding SelectionBoxItem}"
                                                       Margin="10 0 10 1.5"/>

                                     <Grid Margin=" -3 0 -1 -2">
                                         <Popup Name="Popup" Placement="Bottom" PopupAnimation="Fade"
                                                IsOpen="{TemplateBinding IsDropDownOpen}"
                                                AllowsTransparency="True" Focusable="False">
                                             <Border x:Name="DropDownBorder" SnapsToDevicePixels="True"
                                                     MinWidth="{Binding ElementName=Border, Path=ActualWidth}"
                                                     MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                                     BorderThickness="{TemplateBinding BorderThickness}"
                                                     Background="{StaticResource BBgWhite}"
                                                     BorderBrush="{StaticResource BGray}"
                                                     Effect="{StaticResource Shadow}"
                                                     CornerRadius="5" Focusable="False"
                                                     Margin="10 10 10 10">
                                                 <ScrollViewer HorizontalScrollBarVisibility="Auto"
                                                               VerticalScrollBarVisibility="Auto" 
                                                               Margin="4,4,4,4"
                                                               SnapsToDevicePixels="True"
                                                               Focusable="False">
                                                    <StackPanel KeyboardNavigation.DirectionalNavigation="Contained" 
                                                                IsItemsHost="True"/>
                                                 </ScrollViewer>
                                             </Border>
                                         </Popup>
                                     </Grid>

                                </Grid>
                            </ToggleButton>

                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Halo" Property="BorderBrush">
                                <Setter.Value>
                                    <SolidColorBrush Opacity="0.25" Color="{Binding Source={StaticResource BBgPrimary}, 
                                        Converter={StaticResource BrushToColorConverter}}"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--BScrollViewer-->
    <Style x:Key="BScrollViewer" TargetType="{x:Type ScrollViewer}">
        <Setter Property="HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Padding" Value="0 0 15 0"/>
        <Setter Property="Margin" Value="-4 0 0 0"/>
    </Style>


    <!---->
    <!---BUTTONS-->
    <!---->


    <!--BBtn-->
    <Style x:Key="BBtn" BasedOn="{StaticResource BAutoCollapsedElement}" TargetType="{x:Type Button}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="BorderBrush" Value="{x:Null}"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Focusable" Value="False"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush">
                    <Setter.Value>
                        <SolidColorBrush Opacity="0.4" Color="{Binding RelativeSource={RelativeSource FindAncestor, 
                            AncestorType={x:Type Button}}, Path=Background, Converter={StaticResource BrushToColorConverter}}"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
        <Setter Property="Margin" Value=" 0 0 4 0"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="Height" Value="38.5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="Halo" BorderThickness="4" Margin="-4" CornerRadius="6" 
                            BorderBrush="{TemplateBinding BorderBrush}" Background="{Binding ElementName=Halo, Path=BorderBrush}">
                        <Border x:Name="Border" CornerRadius="5" Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Stretch" VerticalAlignment="Center" Margin="13.5 0 13.5 1"/>
                        </Border>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--BBtnText-->
    <Style x:Key="BBtnText" TargetType="{x:Type Label}">
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource FindAncestor, 
            AncestorType={x:Type Button}}, Path=Foreground}"/>
        <Setter Property="Margin" Value="0 0 -3 0"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="FontSize" Value="16"/>
    </Style>

    <!--BBtnIcon-->
    <Style x:Key="BBtnIcon" TargetType="{x:Type bi:BootstrapIcon}">
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource FindAncestor, 
            AncestorType={x:Type Button}}, Path=Foreground}"/>
        <Setter Property="Margin" Value="1 0 0 -2"/>
        <Setter Property="Height" Value="16"/>
        <Setter Property="Width" Value="16"/>
    </Style>

    <!--BBtnPrim-->
    <Style x:Key="BBtnPrim" BasedOn="{StaticResource BBtn}" TargetType="{x:Type Button}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource BBgPrimaryOver}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource BBgPrimaryPressed}"/>
            </Trigger>
        </Style.Triggers>
        <Setter Property="Background" Value="{StaticResource BBgPrimary}"/>
        <Setter Property="Foreground" Value="{StaticResource BWhite}"/>
    </Style>

    <!--BBtnSec-->
    <Style x:Key="BBtnSec" BasedOn="{StaticResource BBtn}" TargetType="{x:Type Button}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource BBgSecondaryOver}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource BBgSecondaryPressed}"/>
            </Trigger>
        </Style.Triggers>
        <Setter Property="Background" Value="{StaticResource BBgSecondary}"/>
        <Setter Property="Foreground" Value="{StaticResource BWhite}"/>
    </Style>

    <!--BBtnScc-->
    <Style x:Key="BBtnScc" BasedOn="{StaticResource BBtn}" TargetType="{x:Type Button}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource BBgSuccessOver}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource BBgSuccessPressed}"/>
            </Trigger>
        </Style.Triggers>
        <Setter Property="Background" Value="{StaticResource BBgSuccess}"/>
        <Setter Property="Foreground" Value="{StaticResource BWhite}"/>
    </Style>

    <!--BBtnWrn-->
    <Style x:Key="BBtnWrn" BasedOn="{StaticResource BBtn}" TargetType="{x:Type Button}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource BBgWarningOver}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource BBgWarningPressed}"/>
            </Trigger>
        </Style.Triggers>
        <Setter Property="Background" Value="{StaticResource BBgWarning}"/>
        <Setter Property="Foreground" Value="{StaticResource BTextDark}"/>
    </Style>

    <!--BBtnDng-->
    <Style x:Key="BBtnDng" BasedOn="{StaticResource BBtn}" TargetType="{x:Type Button}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource BBgDangerOver}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource BBgDangerPressed}"/>
            </Trigger>
        </Style.Triggers>
        <Setter Property="Background" Value="{StaticResource BBgDanger}"/>
        <Setter Property="Foreground" Value="{StaticResource BWhite}"/>
    </Style>

    <!--BErrorIcon-->
    <Style x:Key="BErrorIcon" BasedOn="{StaticResource BBtnIcon}" TargetType="{x:Type bi:BootstrapIcon}">
        <Setter Property="Foreground" Value="{StaticResource BBgSecondary}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Height" Value="17"/>
        <Setter Property="Width" Value="17"/>
    </Style>

    <!--BPanelBtnPair-->
    <Style x:Key="BPanelBtnPair" TargetType="{x:Type DockPanel}">
        <Setter Property="Margin" Value="4 10 0 4"/>
    </Style>

    <!--BStickyButton-->
    <Style x:Key="BStickyButton" TargetType="{x:Type c:StickyButton}">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Border.CornerRadius" Value="6"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="IsSticked" Value="True"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="Height" Value="36"/>
        <Setter Property="Opacity" Value="1"/>
    </Style>

    <!--BStickyButtonTemplate-->
    <ControlTemplate x:Key="BStickyButtonTemplate" TargetType="{x:Type c:StickyButton}">
        <Border x:Name="Halo" BorderThickness="4" Margin="-4" CornerRadius="6" 
                BorderBrush="{TemplateBinding BorderBrush}" Background="{Binding ElementName=Halo, Path=BorderBrush}">
            <Grid>
                <Border x:Name="Border"
                        CornerRadius="{TemplateBinding Border.CornerRadius}"
                        BorderThickness="{TemplateBinding BorderThickness}" 
                        Background="{TemplateBinding Background}"
                        IsHitTestVisible="False"
                        Opacity="{TemplateBinding Opacity}">
                    <DockPanel Margin="12 0">
                        <bi:BootstrapIcon x:Name="Icon"
                                                  Foreground="{TemplateBinding Foreground}"
                                                  Margin="0 2 5 0"
                                                  Width="16" Height="16"
                                                  Icon="ShieldLockFill"/>
                        <Label x:Name="Label"
                               IsEnabled="{TemplateBinding IsTextCollapsed}"
                               Foreground="{TemplateBinding Foreground}"
                               FontFamily="{TemplateBinding FontFamily}"
                               FontSize="{TemplateBinding FontSize}"
                               Content="{TemplateBinding Content}"
                               Margin="-5 0 0 0"
                               VerticalAlignment="Center"/>
                        <fa:ImageAwesome x:Name="Caret" 
                                         PrimaryColor="{TemplateBinding Foreground}"
                                         VerticalAlignment="Center" HorizontalAlignment="Center"
                                         Stretch="Fill" Height="4" Width="7"
                                         Margin="3 3 0 0" 
                                         SnapsToDevicePixels="True"
                                         Icon="Solid_CaretDown"/>
                    </DockPanel>
                </Border>
                <Border x:Name="StickyBorder"
                        CornerRadius="{TemplateBinding Border.CornerRadius}"
                        BorderThickness="{TemplateBinding BorderThickness}" 
                        IsHitTestVisible="{TemplateBinding IsHitTestVisible}"
                        Background="{TemplateBinding StickyBackground}"
                        Opacity="0">
                    <DockPanel Margin="12 0">
                        <bi:BootstrapIcon x:Name="StickyIcon"       
                                                  Foreground="{TemplateBinding StickyForeground}"
                                                  Margin="0 2 5 0"
                                                  Width="16" Height="16"
                                                  Icon="ShieldLockFill"/>
                        <Label x:Name="StickyLabel"
                               Foreground="{TemplateBinding StickyForeground}"
                               IsEnabled="{TemplateBinding IsTextCollapsed}"
                               FontFamily="{TemplateBinding FontFamily}"
                               FontSize="{TemplateBinding FontSize}"
                               Content="{TemplateBinding Content}"
                               Margin="-5 0 0 0"
                               VerticalAlignment="Center"/>
                        <fa:ImageAwesome x:Name="StickyCaret" 
                                         PrimaryColor="{TemplateBinding StickyForeground}"
                                         VerticalAlignment="Center" HorizontalAlignment="Center"
                                         Stretch="Fill" Height="4" Width="7"
                                         Margin="3 3 0 0" 
                                         SnapsToDevicePixels="True"
                                         Icon="Solid_CaretDown"/>
                 </DockPanel>
                 </Border>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsTextCollapsed" Value="True">
                <Setter TargetName="Icon" Property="Icon" Value="ShieldLockFill"/>
                <Setter TargetName="StickyIcon" Property="Icon" Value="ShieldLockFill"/>
                <Setter TargetName="Label" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="StickyLabel" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsTextCollapsed" Value="False">
                <Setter TargetName="Icon" Property="Icon" Value="PersonCircle"/>
                <Setter TargetName="StickyIcon" Property="Icon" Value="PersonCircle"/>
                <Setter TargetName="Label" Property="Visibility" Value="Visible"/>
                <Setter TargetName="StickyLabel" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsSticked" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard TargetName="StickyBorder" TargetProperty="Opacity" Duration="0:0:0.15">
                            <DoubleAnimationUsingKeyFrames>
                                <LinearDoubleKeyFrame KeyTime="0:0:0.15" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                    <BeginStoryboard>
                        <Storyboard TargetProperty="Foreground">
                            <a:BrushAnimation Duration="0:0:0.15" 
                                              From="{StaticResource BWhite}" 
                                              To="{StaticResource BBlack}"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard TargetName="StickyBorder" TargetProperty="Opacity" Duration="0:0:0.15">
                            <DoubleAnimationUsingKeyFrames>
                                <LinearDoubleKeyFrame KeyTime="0:0:0.15" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                    <BeginStoryboard>
                        <Storyboard TargetProperty="Foreground">
                            <a:BrushAnimation Duration="0:0:0.15" 
                                          From="{StaticResource BBlack}" 
                                          To="{StaticResource BWhite}"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <!---->
    <!---CONTEXT-MENU-->
    <!---->


    <!--BMenuBorder-->
    <Style x:Key="BMenuBorder" TargetType="{x:Type Border}">
        <Setter Property="BorderBrush" Value="{StaticResource BSemiLightGray}"/>
        <Setter Property="Background" Value="{StaticResource BWhite}"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="CornerRadius" Value="5"/>
        <Setter Property="Margin" Value="0 3"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Width" Value="160"/>
    </Style>

    <!--BContextMenuButton-->
    <Style x:Key="BContextMenuButton" TargetType="Button">
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Canvas}}, Path=IsHitTestVisible}" Value="false">
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="Focusable" Value="False"/>
            </DataTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource BLightGray}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource BBgPrimary}"/>
                <Setter Property="Foreground" Value="{StaticResource BTextWhite}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Focusable" Value="False"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsFocused" Value="True"/>
                    <Condition Property="IsMouseOver" Value="False"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" Value="{StaticResource BLightGray}"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
        </Style.Triggers>
        <Setter Property="CommandParameter" Value="{Binding RelativeSource={RelativeSource FindAncestor, 
            AncestorType={x:Type views:View}}, Path=ResetMenuCmd}"/>
        <Setter Property="Background" Value="{StaticResource BTransparent}"/>
        <Setter Property="Foreground" Value="{StaticResource BBlack}"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="Height" Value="32"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border CornerRadius="0" Background="{TemplateBinding Background}">
                        <ContentPresenter/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--BContextMenuHeader-->
    <Style x:Key="BContextMenuHeader" TargetType="{x:Type Label}">
        <Setter Property="Foreground" Value="{StaticResource BBgSecondary}"/>
        <Setter Property="Margin" Value="10 0 10 3"/>
        <Setter Property="FontFamily" Value="Segoe UI Semibold"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="FontSize" Value="14"/>
    </Style>

    <!--BContextMenuTitle-->
    <Style x:Key="BContextMenuTitle" TargetType="{x:Type Label}">
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource FindAncestor, 
            AncestorType={x:Type Button}}, Path=Foreground}"/>
        <Setter Property="Margin" Value="10 -2 10 0"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="FontSize" Value="16"/>
    </Style>

    <!--BContextMenuSeparator-->
    <Style x:Key="BContextMenuSeparator" TargetType="{x:Type Rectangle}">
        <Setter Property="Fill" Value="{StaticResource BSemiLightGray}"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Margin" Value="0 7"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Height" Value="1"/>
    </Style>

    <!--BContextMenuSeparatorTemplate-->
    <ControlTemplate x:Key="BContextMenuSeparatorTemplate" TargetType="{x:Type Separator}">
        <Rectangle Style="{StaticResource BContextMenuSeparator}"/>
    </ControlTemplate>

    <!--BContextMenu-->
    <Style x:Key="BContextMenu" TargetType="{x:Type ContextMenu}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
        <Setter Property="HasDropShadow" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border x:Name="Border" Style="{StaticResource BMenuBorder}">
                        <StackPanel Margin="0 10 0 8">
                            <Label Content="Actions" Style="{StaticResource BContextMenuHeader}"/>
                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" Value="true">
                            <Setter TargetName="Border" Property="Padding" Value="0,3,0,3" />
                            <Setter TargetName="Border" Property="CornerRadius" Value="4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--BContextMenuItemTemplatePrimary-->
    <ControlTemplate x:Key="BContextMenuItemTemplatePrimary" TargetType="{x:Type MenuItem}">
        <Border x:Name="templateRoot"
                Background="{TemplateBinding Background}" 
                BorderBrush="{TemplateBinding BorderBrush}" 
                BorderThickness="{TemplateBinding BorderThickness}"
                Height="{TemplateBinding Height}"
                SnapsToDevicePixels="true"
                CornerRadius="0">

            <Grid Margin="10 0 10 3">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition MinWidth="22" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
                    <ColumnDefinition Width="1"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
            </Grid.ColumnDefinitions>

                <ContentPresenter x:Name="Icon" Grid.Column="0" ContentSource="Icon"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                  HorizontalAlignment="Center" VerticalAlignment="Center"
                                  Margin="0 2 0 0"
                                  Height="13" Width="13"/>

                <Border Grid.Column="0" x:Name="GlyphPanel" 
                        Background="{StaticResource MenuItem.Selected.Background}" 
                        BorderBrush="{StaticResource MenuItem.Selected.Border}" 
                        BorderThickness="1" 
                        ClipToBounds="False" 
                        HorizontalAlignment="Center" 
                        Height="22" Margin="-1,0,0,0" 
                        VerticalAlignment="Center" 
                        Visibility="Hidden" Width="22">
                    <Path x:Name="Glyph" 
                          Data="{StaticResource Checkmark}" 
                          FlowDirection="LeftToRight" Fill="{StaticResource Menu.Static.Foreground}" 
                          Height="11" Width="10"/>
                </Border>

                <ContentPresenter x:Name="menuHeaderContainer" ContentSource="Header" Grid.Column="2"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                  HorizontalAlignment="Left" VerticalAlignment="Center"
                                  Margin="{TemplateBinding Padding}" 
                                  RecognizesAccessKey="True"/>

                <Label x:Name="menuGestureText" Grid.Column="3"
                       Style="{StaticResource BContextMenuTitle}"
                       Content="{TemplateBinding InputGestureText}"
                       Margin="{TemplateBinding Padding}" />
            </Grid>

        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource BBgPrimary}"/>
                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource BBgWhite}"/>
                <Setter Property="Foreground" Value="{StaticResource BBgWhite}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True"/>
                    <Condition Property="IsPressed" Value="False"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource BLightGray}"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Visibility" Value="Collapsed"/>
                <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{StaticResource Menu.Disabled.Foreground}"/>
                <Setter Property="Fill" TargetName="Glyph" Value="{StaticResource Menu.Disabled.Foreground}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True"/>
                    <Condition Property="IsEnabled" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource MenuItem.Highlight.Disabled.Background}"/>
                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource MenuItem.Highlight.Disabled.Border}"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--BContextMenuItemTemplateSuccess-->
    <ControlTemplate x:Key="BContextMenuItemTemplateSuccess" TargetType="{x:Type MenuItem}">
        <Border x:Name="templateRoot"
                Background="{TemplateBinding Background}" 
                BorderBrush="{TemplateBinding BorderBrush}" 
                BorderThickness="{TemplateBinding BorderThickness}"
                Height="{TemplateBinding Height}"
                SnapsToDevicePixels="true"
                CornerRadius="0">

            <Grid Margin="10 0 10 3">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition MinWidth="22" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
                    <ColumnDefinition Width="1"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
                </Grid.ColumnDefinitions>

                <ContentPresenter x:Name="Icon" Grid.Column="0" ContentSource="Icon"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                              HorizontalAlignment="Center" VerticalAlignment="Center"
                              Margin="0 2 0 0"
                              Height="13" Width="13"/>

                <Border Grid.Column="0" x:Name="GlyphPanel" 
                    Background="{StaticResource MenuItem.Selected.Background}" 
                    BorderBrush="{StaticResource MenuItem.Selected.Border}" 
                    BorderThickness="1" 
                    ClipToBounds="False" 
                    HorizontalAlignment="Center" 
                    Height="22" Margin="-1,0,0,0" 
                    VerticalAlignment="Center" 
                    Visibility="Hidden" Width="22">
                    <Path x:Name="Glyph" 
                      Data="{StaticResource Checkmark}" 
                      FlowDirection="LeftToRight" Fill="{StaticResource Menu.Static.Foreground}" 
                      Height="11" Width="10"/>
                </Border>

                <ContentPresenter x:Name="menuHeaderContainer" ContentSource="Header" Grid.Column="2"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                              HorizontalAlignment="Left" VerticalAlignment="Center"
                              Margin="{TemplateBinding Padding}" 
                              RecognizesAccessKey="True"/>

                <Label x:Name="menuGestureText" Grid.Column="3"
                   Style="{StaticResource BContextMenuTitle}"
                   Content="{TemplateBinding InputGestureText}"
                   Margin="{TemplateBinding Padding}" />
            </Grid>

        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource BBgSuccess}"/>
                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource BBgWhite}"/>
                <Setter Property="Foreground" Value="{StaticResource BBgWhite}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True"/>
                    <Condition Property="IsPressed" Value="False"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource BLightGray}"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Visibility" Value="Collapsed"/>
                <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{StaticResource Menu.Disabled.Foreground}"/>
                <Setter Property="Fill" TargetName="Glyph" Value="{StaticResource Menu.Disabled.Foreground}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True"/>
                    <Condition Property="IsEnabled" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource MenuItem.Highlight.Disabled.Background}"/>
                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource MenuItem.Highlight.Disabled.Border}"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--BContextMenuItemTemplateSuccessSub-->
    <ControlTemplate x:Key="BContextMenuItemTemplateSuccessSub" TargetType="{x:Type MenuItem}">
        <Border x:Name="templateRoot"
                Background="{TemplateBinding Background}" 
                BorderBrush="{TemplateBinding BorderBrush}" 
                BorderThickness="{TemplateBinding BorderThickness}"
                Height="{TemplateBinding Height}"
                SnapsToDevicePixels="true"
                CornerRadius="0">

            <Grid Margin="10 0 10 3">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition MinWidth="22" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
                    <ColumnDefinition Width="1"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
                    <ColumnDefinition Width="20"/>
                </Grid.ColumnDefinitions>

                <ContentPresenter x:Name="Icon" Grid.Column="0" ContentSource="Icon"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                  HorizontalAlignment="Center" VerticalAlignment="Center"
                                  Margin="0 2 0 0"
                                  Height="13" Width="13"/>

                <Border Grid.Column="0" x:Name="GlyphPanel" 
                        Background="{StaticResource MenuItem.Selected.Background}" 
                        BorderBrush="{StaticResource MenuItem.Selected.Border}" 
                        BorderThickness="1" 
                        ClipToBounds="False" 
                        HorizontalAlignment="Center" 
                        Height="22" Margin="-1,0,0,0" 
                        VerticalAlignment="Center" 
                        Visibility="Hidden" Width="22">

                    <Path x:Name="Glyph" 
                          Data="{StaticResource Checkmark}" 
                          FlowDirection="LeftToRight" Fill="{StaticResource Menu.Static.Foreground}" 
                          Height="11" Width="10"/>
                </Border>

                <ContentPresenter x:Name="menuHeaderContainer" ContentSource="Header" Grid.Column="2"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                  HorizontalAlignment="Left" VerticalAlignment="Center"
                                  Margin="{TemplateBinding Padding}" 
                                  RecognizesAccessKey="True"/>

                <Label x:Name="menuGestureText" Grid.Column="3"
                       Style="{StaticResource BContextMenuTitle}"
                       Content="{TemplateBinding InputGestureText}"
                       Margin="{TemplateBinding Padding}" />

                <Path x:Name="RightArrow" Grid.Column="4" 
                      Data="{StaticResource RightArrow}" 
                      Fill="{StaticResource Menu.Static.Foreground}" 
                      HorizontalAlignment="Left" Margin="10,0,0,0" 
                      VerticalAlignment="Center"/>

                <Popup Grid.Column="0" x:Name="PART_Popup" 
                       AllowsTransparency="true" 
                       Focusable="false" HorizontalOffset="5" 
                       IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" 
                       PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" 
                       Placement="Right" VerticalOffset="-11">
                    <Border x:Name="SubMenuBorder" Style="{StaticResource BMenuBorder}">
                        <ScrollViewer x:Name="SubMenuScrollViewer" Margin="0 10 0 8"
                                      Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, 
                                        TypeInTargetAssembly={x:Type FrameworkElement}}}">

                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas HorizontalAlignment="Left" Height="0" 
                                        VerticalAlignment="Top" Width="0">
                                    <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=SubMenuBorder}" 
                                               Height="{Binding ActualHeight, ElementName=SubMenuBorder}" 
                                               Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
                                </Canvas>

                                <ItemsPresenter x:Name="ItemsPresenter" 
                                                KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true" 
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                                KeyboardNavigation.TabNavigation="Cycle"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
            </Trigger>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsSubmenuOpen" Value="true">
                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource BBgSuccess}"/>
                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource BBgWhite}"/>
                <Setter Property="Fill" TargetName="RightArrow" Value="{StaticResource BBgWhite}"/>
                <Setter Property="Foreground" Value="{StaticResource BBgWhite}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource BBgSuccess}"/>
                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource BBgWhite}"/>
                <Setter Property="Fill" TargetName="RightArrow" Value="{StaticResource BBgWhite}"/>
                <Setter Property="Foreground" Value="{StaticResource BBgWhite}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True"/>
                    <Condition Property="IsSubmenuOpen" Value="False"/>
                    <Condition Property="IsPressed" Value="False"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource BLightGray}"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{StaticResource Menu.Disabled.Foreground}"/>
                <Setter Property="Fill" TargetName="Glyph" Value="{StaticResource Menu.Disabled.Foreground}"/>
                <Setter Property="Fill" TargetName="RightArrow" Value="{StaticResource Menu.Disabled.Foreground}"/>
            </Trigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="SubMenuScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--BContextMenuItemTemplateWarning-->
    <ControlTemplate x:Key="BContextMenuItemTemplateWarning" TargetType="{x:Type MenuItem}">
        <Border x:Name="templateRoot"
                Background="{TemplateBinding Background}" 
                BorderBrush="{TemplateBinding BorderBrush}" 
                BorderThickness="{TemplateBinding BorderThickness}"
                Height="{TemplateBinding Height}"
                SnapsToDevicePixels="true"
                CornerRadius="0">

            <Grid Margin="10 0 10 3">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition MinWidth="22" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
                    <ColumnDefinition Width="1"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
                </Grid.ColumnDefinitions>

                <ContentPresenter x:Name="Icon" Grid.Column="0" ContentSource="Icon"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                  HorizontalAlignment="Center" VerticalAlignment="Center"
                                  Margin="0 2 0 0"
                                  Height="13" Width="13"/>

                <Border Grid.Column="0" x:Name="GlyphPanel" 
                        Background="{StaticResource MenuItem.Selected.Background}" 
                        BorderBrush="{StaticResource MenuItem.Selected.Border}" 
                        BorderThickness="1" 
                        ClipToBounds="False" 
                        HorizontalAlignment="Center" 
                        Height="22" Margin="-1,0,0,0" 
                        VerticalAlignment="Center" 
                        Visibility="Hidden" Width="22">

                    <Path x:Name="Glyph" 
                          Data="{StaticResource Checkmark}" 
                          FlowDirection="LeftToRight" Fill="{StaticResource Menu.Static.Foreground}" 
                          Height="11" Width="10"/>
                </Border>

                <ContentPresenter x:Name="menuHeaderContainer" ContentSource="Header" Grid.Column="2"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                  HorizontalAlignment="Left" VerticalAlignment="Center"
                                  Margin="{TemplateBinding Padding}" 
                                  RecognizesAccessKey="True"/>

                <Label x:Name="menuGestureText" Grid.Column="3"
                       Style="{StaticResource BContextMenuTitle}"
                       Content="{TemplateBinding InputGestureText}"
                       Margin="{TemplateBinding Padding}" />
            </Grid>

        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource BBgWarning}"/>
                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource BBgDark}"/>
                <Setter Property="Foreground" Value="{StaticResource BBgDark}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True"/>
                    <Condition Property="IsPressed" Value="False"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource BLightGray}"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Visibility" Value="Collapsed"/>
                <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{StaticResource Menu.Disabled.Foreground}"/>
                <Setter Property="Fill" TargetName="Glyph" Value="{StaticResource Menu.Disabled.Foreground}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True"/>
                    <Condition Property="IsEnabled" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource MenuItem.Highlight.Disabled.Background}"/>
                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource MenuItem.Highlight.Disabled.Border}"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--BContextMenuItem-->
    <Style x:Key="BContextMenuItem" BasedOn="{StaticResource MenuItemDefaultStyle}" TargetType="{x:Type MenuItem}">
        <Setter Property="CommandParameter" Value="{Binding PlacementTarget.SelectedItem.Id, 
            RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContextMenu}}}"/>
        <Setter Property="Background" Value="{StaticResource BTransparent}"/>
        <Setter Property="BorderBrush" Value="{StaticResource BBgWhite}"/>
        <Setter Property="Foreground" Value="{StaticResource BBlack}"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="Height" Value="32"/>
    </Style>

    <!--BContextMenuItemPrimary-->
    <Style x:Key="BContextMenuItemPrimary" BasedOn="{StaticResource BContextMenuItem}" TargetType="{x:Type MenuItem}">
        <Setter Property="Template" Value="{StaticResource BContextMenuItemTemplatePrimary}"/>
    </Style>

    <!--BContextMenuItemSuccess-->
    <Style x:Key="BContextMenuItemSuccess" BasedOn="{StaticResource BContextMenuItem}" TargetType="{x:Type MenuItem}">
        <Setter Property="Template" Value="{StaticResource BContextMenuItemTemplateSuccess}"/>
        <Style.Triggers>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Template" Value="{StaticResource BContextMenuItemTemplateSuccessSub}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--BContextMenuItemWarning-->
    <Style x:Key="BContextMenuItemWarning" BasedOn="{StaticResource BContextMenuItem}" TargetType="{x:Type MenuItem}">
        <Setter Property="Template" Value="{StaticResource BContextMenuItemTemplateWarning}"/>
    </Style>


    <!---->
    <!---TABLE-->
    <!---->


    <!--BTableRow-->
    <Style x:Key="BTableRow" TargetType="{x:Type DataGridRow}">
        <Setter Property="Focusable" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGrid}}, Path=Focusable}"/>
        <Setter Property="Padding" Value="20 0"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="FontSize" Value="16"/>
    </Style>

    <!--BTableRowInactive-->
    <Style x:Key="BTableRowInactive" BasedOn="{StaticResource BTableRow}" TargetType="{x:Type DataGridRow}">
        <Setter Property="IsHitTestVisible" Value="False"/>
    </Style>

    <!--BTableCell-->
    <Style x:Key="BTableCell" TargetType="{x:Type DataGridCell}">
        <Setter Property="Focusable" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGrid}}, Path=Focusable}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center" Margin="5 0"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--BTable-->
    <Style x:Key="BTable" BasedOn="{StaticResource BAutoCollapsedElement}" TargetType="{x:Type DataGrid}">
        <Style.Resources>
            <!--RowHeight-->
            <s:Double x:Key="RowHeight">41</s:Double>
            <!--FadeIn-->
            <Storyboard x:Key="FadeIn">
                <DoubleAnimation Storyboard.TargetProperty="Opacity" Duration="0:0:0.15" From="0" To="1"/>
            </Storyboard>
            <!--ColumnHeader-->
            <Style x:Key="ColumnHeader" BasedOn="{StaticResource {x:Type DataGridColumnHeader}}" 
                   TargetType="{x:Type DataGridColumnHeader}">
                <Setter Property="Foreground" Value="{StaticResource BBlack}"/>
                <Setter Property="Height" Value="{StaticResource RowHeight}"/>
                <Setter Property="Margin" Value="-1 0 0 0"/>
                <Setter Property="FontFamily" Value="Segoe UI Bold"/>
                <Setter Property="Padding" Value="7 0"/>
                <Setter Property="FontSize" Value="16"/>
            </Style>
        </Style.Resources>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=Items.Count, RelativeSource={RelativeSource Self}}" Value="0">
                <Setter Property="IsEnabled" Value="false"/>
            </DataTrigger>
            <Trigger Property="IsEnabled" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource FadeIn}"/>
                </Trigger.EnterActions>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0"/>
            </Trigger>
        </Style.Triggers>
        <Setter Property="HorizontalGridLinesBrush" Value="{StaticResource BGrayBorderA}"/>
        <Setter Property="VerticalGridLinesBrush" Value="{StaticResource BGrayBorderA}"/>
        <Setter Property="AlternatingRowBackground" Value="{StaticResource BBgWhite}"/>
        <Setter Property="ColumnHeaderStyle" Value="{StaticResource ColumnHeader}"/>
        <Setter Property="RowBackground" Value="{StaticResource BGrayBorderB}"/>
        <Setter Property="RowStyle" Value="{StaticResource BTableRowInactive}"/>
        <Setter Property="BorderBrush" Value="{StaticResource BGrayBorderA}"/>
        <Setter Property="Background" Value="{StaticResource BTransparent}"/>
        <Setter Property="CellStyle" Value="{StaticResource BTableCell}"/>
        <Setter Property="RowHeight" Value="{StaticResource RowHeight}"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AutoGenerateColumns" Value="False"/>
        <Setter Property="HeadersVisibility" Value="Column"/>
        <Setter Property="BorderThickness" Value="1 1 0 0"/>
        <Setter Property="GridLinesVisibility" Value="All"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="CanUserAddRows" Value="False"/>
        <Setter Property="SelectionMode" Value="Single"/>
        <Setter Property="AlternationCount" Value="2"/>
        <Setter Property="IsReadOnly" Value="False"/>
        <Setter Property="SelectedIndex" Value="-1"/>
        <Setter Property="ColumnWidth" Value="*"/>
    </Style>

    <!--BTableContacts-->
    <Style x:Key="BTableContacts" BasedOn="{StaticResource BTable}" TargetType="{x:Type DataGrid}">
        <Style.Resources>
            <!--ContextMenu-->
            <ContextMenu x:Key="BTableContextMenu" Style="{StaticResource BContextMenu}">
                <ContextMenu.Resources>
                    <Style x:Key="MenuEdit" BasedOn="{StaticResource BContextMenuItemPrimary}" TargetType="{x:Type MenuItem}">
                        <Style.Resources>
                            <bi:BootstrapIcon x:Key="Icon" Icon="Pencil" Foreground="{StaticResource BBgPrimary}"/>
                            <bi:BootstrapIcon x:Key="IconWhite" Icon="Pencil" Foreground="{StaticResource BBgWhite}"/>
                        </Style.Resources>
                        <Style.Triggers>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Icon" Value="{StaticResource IconWhite}"/>
                            </Trigger>
                        </Style.Triggers>
                        <Setter Property="IsEnabled" Value="{Binding Owner.IsAdmin}"/>
                        <Setter Property="Icon" Value="{StaticResource Icon}"/>
                    </Style>
                    <Style x:Key="MenuDetails" BasedOn="{StaticResource BContextMenuItemPrimary}" TargetType="{x:Type MenuItem}">
                        <Style.Resources>
                            <bi:BootstrapIcon x:Key="Icon" Icon="InfoCircle" Foreground="{StaticResource BBgSecondary}"/>
                            <bi:BootstrapIcon x:Key="IconWhite" Icon="InfoCircle" Foreground="{StaticResource BBgWhite}"/>
                        </Style.Resources>
                        <Style.Triggers>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Icon" Value="{StaticResource IconWhite}"/>
                            </Trigger>
                        </Style.Triggers>
                        <Setter Property="IsEnabled" Value="{Binding Owner.IsAuthenticated}"/>
                        <Setter Property="Icon" Value="{StaticResource Icon}"/>
                    </Style>
                    <Style x:Key="MenuDelete" BasedOn="{StaticResource BContextMenuItemPrimary}" TargetType="{x:Type MenuItem}">
                        <Style.Resources>
                            <bi:BootstrapIcon x:Key="Icon" Icon="Trash3" Foreground="{StaticResource BBgDanger}"/>
                            <bi:BootstrapIcon x:Key="IconWhite" Icon="Trash3" Foreground="{StaticResource BBgWhite}"/>
                        </Style.Resources>
                        <Style.Triggers>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Icon" Value="{StaticResource IconWhite}"/>
                            </Trigger>
                        </Style.Triggers>
                        <Setter Property="IsEnabled" Value="{Binding Owner.IsAdmin}"/>
                        <Setter Property="Icon" Value="{StaticResource Icon}"/>
                    </Style>
                </ContextMenu.Resources>
                <MenuItem Header="Edit" Command="{Binding Owner.ContactEditCmd}" Style="{StaticResource MenuEdit}"/>
                <MenuItem Header="Details" Command="{Binding Owner.ContactDetailsCmd}" Style="{StaticResource MenuDetails}"/>
                <MenuItem Header="Delete" Command="{Binding Owner.ContactDeleteCmd}" Style="{StaticResource MenuDelete}"/>
            </ContextMenu>
            <!--Cell-->
            <Style x:Key="Cell" BasedOn="{StaticResource BTableCell}" TargetType="{x:Type DataGridCell}">
                <Style.Triggers>
                    <Trigger Property="IsSelected" Value="True">
                        <Setter Property="Background" Value="{StaticResource BBgPrimary}"/>
                        <Setter Property="Foreground" Value="{StaticResource BWhite}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Owner.IsAuthenticated}" Value="false">
                <Setter Property="ContextMenu" Value="{x:Null}"/>
                <Setter Property="RowStyle" Value="{StaticResource BTableRowInactive}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=ItemsSource, RelativeSource={RelativeSource Self}}" Value="{x:Null}">
                <Setter Property="ContextMenu" Value="{x:Null}"/>
            </DataTrigger>
        </Style.Triggers>
        <Setter Property="ContextMenu" Value="{StaticResource BTableContextMenu}"/>
        <Setter Property="RowStyle" Value="{StaticResource BTableRow}"/>
        <Setter Property="CellStyle" Value="{StaticResource Cell}"/>
    </Style>

    <!--BTableAccounts-->
    <Style x:Key="BTableAccounts" BasedOn="{StaticResource BTable}" TargetType="{x:Type DataGrid}">
        <Style.Resources>
            <!--ContextMenu-->
            <ContextMenu x:Key="BTableContextMenu" Style="{StaticResource BContextMenu}">
                <ContextMenu.Resources>
                    <Style x:Key="MenuEdit" BasedOn="{StaticResource BContextMenuItemSuccess}" TargetType="{x:Type MenuItem}">
                        <Style.Resources>
                            <bi:BootstrapIcon x:Key="Icon" Icon="Pencil" Foreground="{StaticResource BBgPrimary}"/>
                            <bi:BootstrapIcon x:Key="IconWhite" Icon="Pencil" Foreground="{StaticResource BBgWhite}"/>
                        </Style.Resources>
                        <Style.Triggers>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Icon" Value="{StaticResource IconWhite}"/>
                            </Trigger>
                        </Style.Triggers>
                        <Setter Property="IsEnabled" Value="{Binding Owner.IsAdmin}"/>
                        <Setter Property="Icon" Value="{StaticResource Icon}"/>
                    </Style>
                    <Style x:Key="MenuDetails" BasedOn="{StaticResource BContextMenuItemSuccess}" TargetType="{x:Type MenuItem}">
                        <Style.Resources>
                            <bi:BootstrapIcon x:Key="Icon" Icon="InfoCircle" Foreground="{StaticResource BBgSecondary}"/>
                            <bi:BootstrapIcon x:Key="IconWhite" Icon="InfoCircle" Foreground="{StaticResource BBgWhite}"/>
                        </Style.Resources>
                        <Style.Triggers>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Icon" Value="{StaticResource IconWhite}"/>
                            </Trigger>
                        </Style.Triggers>
                        <Setter Property="IsEnabled" Value="{Binding Owner.IsAdmin}"/>
                        <Setter Property="Icon" Value="{StaticResource Icon}"/>
                    </Style>
                    <Style x:Key="MenuPassword" BasedOn="{StaticResource BContextMenuItemSuccess}" TargetType="{x:Type MenuItem}">
                        <Style.Resources>
                            <bi:BootstrapIcon x:Key="Icon" Icon="KeyFill" Foreground="{StaticResource BBgSuccess}"/>
                            <bi:BootstrapIcon x:Key="IconWhite" Icon="KeyFill" Foreground="{StaticResource BBgWhite}"/>
                        </Style.Resources>
                        <Style.Triggers>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Icon" Value="{StaticResource IconWhite}"/>
                            </Trigger>
                        </Style.Triggers>
                        <Setter Property="IsEnabled" Value="{Binding Owner.IsAdmin}"/>
                        <Setter Property="Icon" Value="{StaticResource Icon}"/>
                    </Style>
                    <Style x:Key="MenuRoles" BasedOn="{StaticResource BContextMenuItemSuccess}" TargetType="{x:Type MenuItem}">
                        <Style.Resources>
                            <bi:BootstrapIcon x:Key="Icon" Icon="StarFill" Foreground="{StaticResource BBgWarning}"/>
                            <bi:BootstrapIcon x:Key="IconWhite" Icon="StarFill" Foreground="{StaticResource BBgWhite}"/>
                        </Style.Resources>
                        <Style.Triggers>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Icon" Value="{StaticResource IconWhite}"/>
                            </Trigger>
                            <Trigger Property="IsSubmenuOpen" Value="True">
                                <Setter Property="Icon" Value="{StaticResource IconWhite}"/>
                            </Trigger>
                        </Style.Triggers>
                        <Setter Property="IsEnabled" Value="{Binding Owner.IsAdmin}"/>
                        <Setter Property="Icon" Value="{StaticResource Icon}"/>
                    </Style>
                    <Style x:Key="MenuRolesShow" BasedOn="{StaticResource BContextMenuItemSuccess}" TargetType="{x:Type MenuItem}">
                        <Style.Resources>
                            <bi:BootstrapIcon x:Key="Icon" Icon="ListUl" Foreground="{StaticResource BBlack}"/>
                            <bi:BootstrapIcon x:Key="IconWhite" Icon="ListUl" Foreground="{StaticResource BBgWhite}"/>
                        </Style.Resources>
                        <Style.Triggers>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Icon" Value="{StaticResource IconWhite}"/>
                            </Trigger>
                        </Style.Triggers>
                        <Setter Property="IsEnabled" Value="{Binding Owner.IsAdmin}"/>
                        <Setter Property="Icon" Value="{StaticResource Icon}"/>
                    </Style>
                    <Style x:Key="MenuRolesAssign" BasedOn="{StaticResource BContextMenuItemSuccess}" TargetType="{x:Type MenuItem}">
                        <Style.Resources>
                            <bi:BootstrapIcon x:Key="Icon" Icon="PatchPlus" Foreground="{StaticResource BBlack}"/>
                            <bi:BootstrapIcon x:Key="IconWhite" Icon="PatchPlus" Foreground="{StaticResource BBgWhite}"/>
                        </Style.Resources>
                        <Style.Triggers>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Icon" Value="{StaticResource IconWhite}"/>
                            </Trigger>
                        </Style.Triggers>
                        <Setter Property="IsEnabled" Value="{Binding Owner.IsAdmin}"/>
                        <Setter Property="Icon" Value="{StaticResource Icon}"/>
                    </Style>
                    <Style x:Key="MenuRolesRemove" BasedOn="{StaticResource BContextMenuItemSuccess}" TargetType="{x:Type MenuItem}">
                        <Style.Resources>
                            <bi:BootstrapIcon x:Key="Icon" Icon="Eraser" Foreground="{StaticResource BBlack}"/>
                            <bi:BootstrapIcon x:Key="IconWhite" Icon="Eraser" Foreground="{StaticResource BBgWhite}"/>
                        </Style.Resources>
                        <Style.Triggers>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Icon" Value="{StaticResource IconWhite}"/>
                            </Trigger>
                        </Style.Triggers>
                        <Setter Property="IsEnabled" Value="{Binding Owner.IsAdmin}"/>
                        <Setter Property="Icon" Value="{StaticResource Icon}"/>
                    </Style>
                    <Style x:Key="MenuDelete" BasedOn="{StaticResource BContextMenuItemSuccess}" TargetType="{x:Type MenuItem}">
                        <Style.Resources>
                            <bi:BootstrapIcon x:Key="Icon" Icon="Trash3" Foreground="{StaticResource BBgDanger}"/>
                            <bi:BootstrapIcon x:Key="IconWhite" Icon="Trash3" Foreground="{StaticResource BBgWhite}"/>
                        </Style.Resources>
                        <Style.Triggers>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Icon" Value="{StaticResource IconWhite}"/>
                            </Trigger>
                            <DataTrigger Value="False">
                                <DataTrigger.Binding>
                                    <MultiBinding Converter="{StaticResource EqualityConverter}">
                                        <Binding Path="PlacementTarget.SelectedItem.Id">
                                            <Binding.RelativeSource>
                                                <RelativeSource Mode="FindAncestor" AncestorType="{x:Type ContextMenu}"/>
                                            </Binding.RelativeSource>
                                        </Binding>
                                        <Binding Path="CurrentUserId"/>
                                    </MultiBinding>
                                </DataTrigger.Binding>
                                <Setter Property="IsEnabled" Value="True"/>
                            </DataTrigger>
                        </Style.Triggers>
                        <Setter Property="Icon" Value="{StaticResource Icon}"/>
                        <Setter Property="IsEnabled" Value="False"/>
                    </Style>
                </ContextMenu.Resources>
                <MenuItem Header="Edit" Command="{Binding Owner.AccountEditCmd}" Style="{StaticResource MenuEdit}"/>
                <MenuItem Header="Details" Command="{Binding Owner.AccountDetailsCmd}" Style="{StaticResource MenuDetails}"/>
                <MenuItem Header="Password" Command="{Binding Owner.AccountChangePasswordCmd}" Style="{StaticResource MenuPassword}"/>
                <MenuItem Header="Roles" Style="{StaticResource MenuRoles}">
                    <MenuItem Header="Show" Command="{Binding Owner.AccountRolesCmd}" Style="{StaticResource MenuRolesShow}"/>
                    <Separator Template="{StaticResource BContextMenuSeparatorTemplate}"/>
                    <MenuItem Header="Assign.." Command="{Binding Owner.AccountRoleAssignCmd}" Style="{StaticResource MenuRolesAssign}"/>
                    <MenuItem Header="Remove.." Command="{Binding Owner.AccountRoleRemoveCmd}" Style="{StaticResource MenuRolesRemove}"/>
                </MenuItem>
                <MenuItem Header="Delete" Command="{Binding Owner.AccountDeleteCmd}" Style="{StaticResource MenuDelete}"/>
            </ContextMenu>
            <!--Cell-->
            <Style x:Key="Cell" BasedOn="{StaticResource BTableCell}" TargetType="{x:Type DataGridCell}">
                <Style.Triggers>
                    <Trigger Property="IsSelected" Value="True">
                        <Setter Property="Background" Value="{StaticResource BBgDark}"/>
                        <Setter Property="Foreground" Value="{StaticResource BWhite}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
            <!--Row-->
            <Style x:Key="Row" BasedOn="{StaticResource BTableRow}" TargetType="{x:Type DataGridRow}">
                <Style.Triggers>
                    <DataTrigger Value="True">
                        <DataTrigger.Binding>
                            <MultiBinding Converter="{StaticResource EqualityConverter}">
                                <Binding Path="Tag">
                                    <Binding.RelativeSource>
                                        <RelativeSource Mode="FindAncestor" AncestorType="DataGrid"/>
                                    </Binding.RelativeSource>
                                </Binding>
                                <Binding Path="Id"/>
                            </MultiBinding>
                        </DataTrigger.Binding>
                        <DataTrigger.Setters>
                            <Setter Property="Background" Value="{StaticResource BBgSuccess}"/>
                            <Setter Property="Foreground" Value="{StaticResource BWhite}"/>
                        </DataTrigger.Setters>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Owner.IsAdmin}" Value="false">
                <Setter Property="ContextMenu" Value="{x:Null}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=ItemsSource, RelativeSource={RelativeSource Self}}" Value="{x:Null}">
                <Setter Property="ContextMenu" Value="{x:Null}"/>
            </DataTrigger>
        </Style.Triggers>
        <Setter Property="ContextMenu" Value="{StaticResource BTableContextMenu}"/>
        <Setter Property="CellStyle" Value="{StaticResource Cell}"/>
        <Setter Property="RowStyle" Value="{StaticResource Row}"/>
        <Setter Property="Tag" Value="{Binding CurrentUserId}"/>
    </Style>

    <!--BTableRoles-->
    <Style x:Key="BTableRoles" BasedOn="{StaticResource BTable}" TargetType="{x:Type DataGrid}">
        <Style.Resources>
            <!--ContextMenu-->
            <ContextMenu x:Key="BTableContextMenu" Style="{StaticResource BContextMenu}">
                <ContextMenu.Resources>
                    <Style x:Key="MenuEdit" BasedOn="{StaticResource BContextMenuItemWarning}" TargetType="{x:Type MenuItem}">
                        <Style.Resources>
                            <bi:BootstrapIcon x:Key="Icon" Icon="Pencil" Foreground="{StaticResource BBgPrimary}"/>
                            <bi:BootstrapIcon x:Key="IconDark" Icon="Pencil" Foreground="{StaticResource BTextDark}"/>
                        </Style.Resources>
                        <Style.Triggers>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Icon" Value="{StaticResource IconDark}"/>
                            </Trigger>
                            <DataTrigger Value="admin" Binding="{Binding Path=PlacementTarget.SelectedItem.Name, 
                                        RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContextMenu}}}">
                                <Setter Property="IsEnabled" Value="False"/>
                            </DataTrigger>
                        </Style.Triggers>
                        <Setter Property="IsEnabled" Value="{Binding Owner.IsAdmin}"/>
                        <Setter Property="Icon" Value="{StaticResource Icon}"/>
                    </Style>
                    <Style x:Key="MenuDetails" BasedOn="{StaticResource BContextMenuItemWarning}" TargetType="{x:Type MenuItem}">
                        <Style.Resources>
                            <bi:BootstrapIcon x:Key="Icon" Icon="InfoCircle" Foreground="{StaticResource BBgSecondary}"/>
                            <bi:BootstrapIcon x:Key="IconDark" Icon="InfoCircle" Foreground="{StaticResource BTextDark}"/>
                        </Style.Resources>
                        <Style.Triggers>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Icon" Value="{StaticResource IconDark}"/>
                            </Trigger>
                        </Style.Triggers>
                        <Setter Property="IsEnabled" Value="{Binding Owner.IsAdmin}"/>
                        <Setter Property="Icon" Value="{StaticResource Icon}"/>
                    </Style>
                    <Style x:Key="MenuDelete" BasedOn="{StaticResource BContextMenuItemWarning}" TargetType="{x:Type MenuItem}">
                        <Style.Resources>
                            <bi:BootstrapIcon x:Key="Icon" Icon="Trash3" Foreground="{StaticResource BBgDanger}"/>
                            <bi:BootstrapIcon x:Key="IconDark" Icon="Trash3" Foreground="{StaticResource BTextDark}"/>
                        </Style.Resources>
                        <Style.Triggers>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Icon" Value="{StaticResource IconDark}"/>
                            </Trigger>
                            <DataTrigger Value="admin" Binding="{Binding Path=PlacementTarget.SelectedItem.Name, 
                                RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContextMenu}}}">
                                <Setter Property="IsEnabled" Value="False"/>
                            </DataTrigger>
                        </Style.Triggers>
                        <Setter Property="IsEnabled" Value="{Binding Owner.IsAdmin}"/>
                        <Setter Property="Icon" Value="{StaticResource Icon}"/>
                    </Style>
                </ContextMenu.Resources>
                <MenuItem Header="Edit" Command="{Binding Owner.RoleEditCmd}" Style="{StaticResource MenuEdit}"/>
                <MenuItem Header="Details" Command="{Binding Owner.RoleDetailsCmd}" Style="{StaticResource MenuDetails}"/>
                <MenuItem Header="Delete" Command="{Binding Owner.RoleDeleteCmd}" Style="{StaticResource MenuDelete}"/>
            </ContextMenu>
            <!--Row-->
            <Style x:Key="Row" BasedOn="{StaticResource BTableRow}" TargetType="{x:Type DataGridRow}">
                <Style.Triggers>
                    <DataTrigger Value="admin" Binding="{Binding Path=Name}">
                        <Setter Property="Background" Value="{StaticResource BBgWarning}"/>
                        <Setter Property="Foreground" Value="{StaticResource BTextDark}"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
            <!--Cell-->
            <Style x:Key="Cell" BasedOn="{StaticResource BTableCell}" TargetType="{x:Type DataGridCell}">
                <Style.Triggers>
                    <Trigger Property="IsSelected" Value="True">
                        <Setter Property="Background" Value="{StaticResource BBgDark}"/>
                        <Setter Property="Foreground" Value="{StaticResource BWhite}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Owner.IsAdmin}" Value="false">
                <Setter Property="ContextMenu" Value="{x:Null}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=ItemsSource, RelativeSource={RelativeSource Self}}" Value="{x:Null}">
                <Setter Property="ContextMenu" Value="{x:Null}"/>
            </DataTrigger>
        </Style.Triggers>
        <Setter Property="ContextMenu" Value="{StaticResource BTableContextMenu}"/>
        <Setter Property="CellStyle" Value="{StaticResource Cell}"/>
        <Setter Property="RowStyle" Value="{StaticResource Row}"/>
    </Style>

</ResourceDictionary>