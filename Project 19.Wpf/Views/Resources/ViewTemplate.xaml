 <ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:bi="https://github.com/helluvamatt/BootstrapIcons.Wpf/"
                    xmlns:c="clr-namespace:System.Windows.Controls;assembly=Wpf"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
                    xmlns:fa="http://schemas.fontawesome.com/icons/svg"
                    xmlns:views="clr-namespace:Project_19.Views">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Styles.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <!--CONTROL-->
    <ControlTemplate x:Key="ControlTemplate">
        <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
            <Grid.Resources>
                <!--LPanel-->
                <Style x:Key="LPanel" TargetType="{x:Type DockPanel}">
                    <Setter Property="HorizontalAlignment" Value="Stretch"/>
                    <Setter Property="Background" Value="{StaticResource BTransparent}"/>
                    <Setter Property="VerticalAlignment" Value="Stretch"/>
                </Style>
                <!--RPanel-->
                <Style x:Key="RPanel" TargetType="{x:Type DockPanel}">
                    <Setter Property="Background" Value="{StaticResource BTransparent}"/>
                    <Setter Property="HorizontalAlignment" Value="Right"/>
                    <Setter Property="VerticalAlignment" Value="Stretch"/>
                </Style>
                <!--LPanelFavicon-->
                <Style x:Key="LPanelFavicon" TargetType="{x:Type Image}">
                    <Setter Property="Source" Value="{Binding RelativeSource={RelativeSource FindAncestor, 
                        AncestorType={x:Type views:View}}, Path=Icon}"/>
                    <Setter Property="Margin" Value="0 0 3 1"/>
                    <Setter Property="IsHitTestVisible" Value="False"/>
                    <Setter Property="Height" Value="10"/>
                    <Setter Property="Width" Value="10"/>
                </Style>
                <!--LPanelTitle-->
                <Style x:Key="LPanelTitle" TargetType="{x:Type TextBlock}">
                    <Setter Property="Text" Value="{Binding RelativeSource={RelativeSource FindAncestor, 
                        AncestorType={x:Type views:View}}, Path=Title}"/>
                    <Setter Property="Foreground" Value="{StaticResource BTextWhite}"/>
                    <Setter Property="Margin" Value="0 0 0 1"/>
                    <Setter Property="FontFamily" Value="Segoe UI Light"/>
                    <Setter Property="VerticalAlignment" Value="Center"/>
                    <Setter Property="IsHitTestVisible" Value="False"/>
                    <Setter Property="FontSize" Value="11"/>
                </Style>
                <!--RPanelButton-->
                <Style x:Key="RPanelButton" TargetType="Button">
                    <Style.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{StaticResource BBlack}"/>
                            <Setter Property="Opacity" Value="0.125"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{StaticResource BBlack}"/>
                            <Setter Property="Opacity" Value="0.2"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Focusable" Value="False"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsFocused" Value="True"/>
                                <Condition Property="IsMouseOver" Value="False"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Background" Value="{StaticResource BBlack}"/>
                                <Setter Property="Opacity" Value="0.075"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                    </Style.Triggers>
                    <Setter Property="Background" Value="{StaticResource BTransparent}"/>
                    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                    <Setter Property="BorderThickness" Value="0"/>
                    <Setter Property="Height" Value="Auto"/>
                    <Setter Property="Width" Value="45"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="Button">
                                <Border Background="{TemplateBinding Background}">
                                    <ContentPresenter/>
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
                <!--RPanelCrossButton-->
                <Style x:Key="RPanelCrossButton" TargetType="Button">
                    <Style.Triggers>
                        <Trigger Property="IsMouseOver" Value="True"><Setter Property="Background" Value="{StaticResource BRed}"/></Trigger>
                        <Trigger Property="IsPressed" Value="True"><Setter Property="Background" Value="{StaticResource BDarkRed}"/></Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Focusable" Value="False"/>
                            </MultiTrigger.Setters>
                            </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsFocused" Value="True"/>
                                <Condition Property="IsMouseOver" Value="False"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Background" Value="{StaticResource BBgDangerAero}"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                    </Style.Triggers>
                    <Setter Property="Background" Value="{StaticResource BTransparent}"/>
                    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                    <Setter Property="BorderThickness" Value="0"/>
                    <Setter Property="Height" Value="Auto"/>
                    <Setter Property="Width" Value="45"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="Button">
                                <Border Background="{TemplateBinding Background}">
                                    <ContentPresenter/>
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
                <!--RPanelIcon-->
                <Style x:Key="RPanelIcon" TargetType="fa:ImageAwesome">
                    <Setter Property="IsHitTestVisible" Value="False"/>
                    <Setter Property="PrimaryColor" Value="{StaticResource BWhite}"/>
                    <Setter Property="Height" Value="10"/>
                    <Setter Property="Width" Value="10"/>
                </Style>
                <!--RPanelMaximizeIcon-->
                <Style x:Key="RPanelMaximizeIcon" BasedOn="{StaticResource RPanelIcon}" TargetType="fa:ImageAwesome">
                    <Setter Property="IsEnabled" Value="{Binding RelativeSource={RelativeSource FindAncestor, 
                        AncestorType={x:Type views:View}}, Path=Fullscreen, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                    <Style.Triggers>
                        <Trigger Property="IsEnabled" Value="false"><Setter Property="Icon" Value="Regular_WindowMaximize"/></Trigger>
                        <Trigger Property="IsEnabled" Value="true"><Setter Property="Icon" Value="Regular_WindowRestore"/></Trigger>
                    </Style.Triggers>
                </Style>
                <!--RPanelCrossIcon-->
                <Style x:Key="RPanelCrossIcon" TargetType="{x:Type bi:BootstrapIcon}">
                    <Setter Property="IsHitTestVisible" Value="False"/>
                    <Setter Property="Foreground" Value="{StaticResource BWhite}"/>
                    <Setter Property="Height" Value="11"/>
                    <Setter Property="Width" Value="11"/>
                    <Setter Property="Icon" Value="XLg"/>
                </Style>
            </Grid.Resources>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <DockPanel x:Name="LPanel" Grid.Column="0" Style="{StaticResource LPanel}">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                        <i:InvokeCommandAction Command="{Binding  RelativeSource={RelativeSource FindAncestor, 
                            AncestorType={x:Type views:View}}, Path=DragCmd}" PassEventArgsToCommand="True"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <Image x:Name="LPanel_Favicon" Style="{StaticResource LPanelFavicon}"/>
                <TextBlock x:Name="LPanel_Title" Style="{StaticResource LPanelTitle}"/>
            </DockPanel>
            <DockPanel x:Name="RPanel" Grid.Column="1" Style="{StaticResource RPanel}">
                <Grid x:Name="RPanel_Min">
                    <Button Style="{StaticResource RPanelButton}"
                            Command="{Binding RelativeSource={RelativeSource FindAncestor, 
                                AncestorType={x:Type views:View}}, Path=MinimizeCmd}"/>
                    <fa:ImageAwesome Style="{StaticResource RPanelIcon}" Icon="Regular_WindowMinimize"/>
                </Grid>
                <Grid x:Name="RPanel_Max">
                    <Button Style="{StaticResource RPanelButton}"
                            Command="{Binding RelativeSource={RelativeSource FindAncestor, 
                                AncestorType={x:Type views:View}}, Path=MaximizeCmd}"/>
                    <fa:ImageAwesome Style="{StaticResource RPanelMaximizeIcon}"/>
                </Grid>
                <Grid x:Name="RPanel_X">
                    <Button Style="{StaticResource RPanelCrossButton}"
                            Command="{Binding RelativeSource={RelativeSource FindAncestor, 
                                AncestorType={x:Type views:View}}, Path=CloseCmd}"/>
                    <bi:BootstrapIcon Style="{StaticResource RPanelCrossIcon}"/>
                </Grid>
            </DockPanel>
        </Grid>
    </ControlTemplate>

    <!--HEADER-->
    <ControlTemplate x:Key="HeaderTemplate">
        <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
            <Grid.Resources>
                <!--Header-->
                <Style x:Key="Header" TargetType="{x:Type DockPanel}">
                    <Setter Property="Background" Value="{StaticResource BTransparent}"/>
                    <Setter Property="Margin" Value="50 -7 0 0"/>
                    <Setter Property="HorizontalAlignment" Value="Left"/>
                    <Setter Property="VerticalAlignment" Value="Center"/>
                </Style>
                <!--HeaderLButton-->
                <Style x:Key="HeaderLButton" TargetType="{x:Type Button}">
                    <Style.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="{StaticResource BLightGray}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="BorderBrush" Value="{x:Null}"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Focusable" Value="False"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush">
                                <Setter.Value>
                                    <SolidColorBrush Opacity="0.4" Color="{Binding RelativeSource={RelativeSource FindAncestor, 
                                        AncestorType={x:Type Button}}, Path=Foreground, Converter={StaticResource BrushToColorConverter}}"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </Style.Triggers>
                    <Setter Property="CommandParameter" Value="{Binding RelativeSource={RelativeSource FindAncestor, 
                        AncestorType={x:Type views:View}}, Path=ResetMenuCmd}"/>
                    <Setter Property="Background" Value="{StaticResource BTransparent}"/>
                    <Setter Property="Foreground" Value="{StaticResource BWhite}"/>
                    <Setter Property="Command" Value="{Binding ContactsCmd}"/>
                    <Setter Property="HorizontalAlignment" Value="Stretch"/>
                    <Setter Property="VerticalAlignment" Value="Stretch"/>
                    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                    <Setter Property="BorderThickness" Value="0"/>
                    <Setter Property="BorderBrush" Value="{x:Null}"/>
                    <Setter Property="Cursor" Value="Hand"/>
                    <Setter Property="Height" Value="Auto"/>
                    <Setter Property="Width" Value="Auto"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="Button">
                                <Border x:Name="Halo" BorderThickness="4" Margin="-16 -4 -4 -4" Padding="12 0 0 0" CornerRadius="15" 
                                        BorderBrush="{TemplateBinding BorderBrush}" Background="{StaticResource BTransparent}">
                                    <Border Background="{TemplateBinding Background}">
                                        <ContentPresenter/>
                                    </Border>
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
                <!--HeaderLButtonIcon-->
                <Style x:Key="HeaderLButtonIcon" TargetType="{x:Type bi:BootstrapIcon}">
                    <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource FindAncestor, 
                        AncestorType={x:Type Button}}, Path=Foreground}"/>
                    <Setter Property="Margin" Value="0 0 5 1"/>
                    <Setter Property="Icon" Value="Telephone"/>
                    <Setter Property="Height" Value="40"/>
                    <Setter Property="Width" Value="40"/>
                </Style>
                <!--HeaderLButtonText-->
                <Style x:Key="HeaderLButtonText" TargetType="{x:Type Label}">
                    <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource FindAncestor, 
                        AncestorType={x:Type Button}}, Path=Foreground}"/>
                    <Setter Property="Margin" Value="0 0 6 4"/>
                    <Setter Property="FontFamily" Value="Segoe UI Semibold"/>
                    <Setter Property="Content" Value="Phonebook"/>
                    <Setter Property="FontSize" Value="40"/>
                </Style>
                <!--HeaderSeparator-->
                <Style x:Key="HeaderSeparator" TargetType="{x:Type Label}">
                    <Setter Property="Foreground" Value="{StaticResource BWhite}"/>
                    <Setter Property="Margin" Value="0 6 0 0"/>
                    <Setter Property="FontFamily" Value="Segoe UI Symbol"/>
                    <Setter Property="VerticalAlignment" Value="Center"/>
                    <Setter Property="FontSize" Value="16"/>
                    <Setter Property="Content" Value="|"/>
                </Style>
                <!--HeaderDropdown-->
                <Style x:Key="HeaderDropdown" TargetType="{x:Type StackPanel}">
                    <Setter Property="Margin" Value="-5 6 0 0"/>
                    <Setter Property="VerticalAlignment" Value="Center"/>
                </Style>
            </Grid.Resources>
            <Grid x:Name="ResetMenuArea" Background="{StaticResource BTransparent}">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                        <i:InvokeCommandAction Command="{Binding  RelativeSource={RelativeSource FindAncestor, 
                            AncestorType={x:Type views:View}}, Path=ResetMenuCmd}" PassEventArgsToCommand="True"/>
                    </i:EventTrigger>
                    <i:EventTrigger EventName="PreviewMouseRightButtonDown">
                        <i:InvokeCommandAction Command="{Binding  RelativeSource={RelativeSource FindAncestor, 
                            AncestorType={x:Type views:View}}, Path=ResetMenuCmd}" PassEventArgsToCommand="True"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </Grid>
            <DockPanel x:Name="Header" Style="{StaticResource Header}">
                <DockPanel x:Name="Header_Logo">
                    <Button x:Name="Header_LButton" Style="{StaticResource HeaderLButton}">
                        <DockPanel>
                            <bi:BootstrapIcon Style="{StaticResource HeaderLButtonIcon}"/>
                            <Label Style="{StaticResource HeaderLButtonText}"/>
                        </DockPanel>
                    </Button>
                    <Label x:Name="Header_Separator" Style="{StaticResource HeaderSeparator}"/>
                </DockPanel>
                <StackPanel x:Name="Header_Dropdown" Style="{StaticResource HeaderDropdown}">
                    <StackPanel.Resources>
                        <!--HeaderBStickyButton-->
                        <Style x:Key="HeaderBStickyButton" BasedOn="{StaticResource BStickyButton}" TargetType="{x:Type c:StickyButton}">
                            <Style.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, 
                                            Path=IsMouseOver}" Value="False"/>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor, 
                                            AncestorType={x:Type views:View}}, Path=InMenu}" Value="False"/>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, 
                                            Path=IsFocused}" Value="False"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="IsSticked" Value="False"/>
                                </MultiDataTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="BorderBrush" Value="{x:Null}"/>
                                        <Condition Property="IsMouseOver" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <MultiTrigger.Setters>
                                        <Setter Property="Focusable" Value="False"/>
                                    </MultiTrigger.Setters>
                                </MultiTrigger>
                                <Trigger Property="IsFocused" Value="True">
                                    <Setter Property="BorderBrush">
                                        <Setter.Value>
                                            <SolidColorBrush Opacity="0.4" Color="{Binding RelativeSource={RelativeSource FindAncestor, 
                                                AncestorType={x:Type c:StickyButton}}, Path=StickyBackground, Converter={StaticResource BrushToColorConverter}}"/>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                            </Style.Triggers>
                            <Setter Property="Command" Value="{Binding  RelativeSource={RelativeSource FindAncestor, 
                                AncestorType={x:Type views:View}}, Path=SetMenuCmd}"/>
                            <Setter Property="Template" Value="{StaticResource BStickyButtonTemplate}"/>
                            <Setter Property="IsTextCollapsed" Value="{Binding IsAuthenticated, 
                                Converter={StaticResource BooleanInverter}}"/>
                            <Setter Property="StickyBackground" Value="{StaticResource BWhite}"/>
                            <Setter Property="StickyForeground" Value="{StaticResource BBlack}"/>
                            <Setter Property="Background" Value="{StaticResource BTransparent}"/>
                            <Setter Property="Foreground" Value="{StaticResource BWhite}"/>
                            <Setter Property="Content" Value="{Binding UserName}"/>
                        </Style>
                        <!--HeaderDAutoFadeElement-->
                        <Style x:Key="HeaderDAutoFadeElement" TargetType="{x:Type FrameworkElement}">
                            <Style.Resources>
                                <!--FadeIn-->
                                <Storyboard x:Key="FadeIn">
                                    <DoubleAnimation Storyboard.TargetProperty="Opacity" Duration="0:0:0.15" From="0" To="1"/>
                                </Storyboard>
                                <!--FadeOut-->
                                <Storyboard x:Key="FadeOut">
                                    <DoubleAnimation Storyboard.TargetProperty="Opacity" Duration="0:0:0.15" From="1" To="0"/>
                                </Storyboard>
                            </Style.Resources>
                            <Setter Property="Opacity" Value="0"/>
                            <Setter Property="IsHitTestVisible" Value="{Binding RelativeSource={RelativeSource FindAncestor, 
                                    AncestorType={x:Type views:View}}, Path=InMenu}"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, 
                                    AncestorType={x:Type views:View}}, Path=InMenu}" Value="true">
                                    <DataTrigger.EnterActions>
                                        <BeginStoryboard Storyboard="{StaticResource FadeIn}"/>
                                    </DataTrigger.EnterActions>
                                    <DataTrigger.ExitActions>
                                        <BeginStoryboard Storyboard="{StaticResource FadeOut}"/>
                                    </DataTrigger.ExitActions>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </StackPanel.Resources>
                    <c:StickyButton x:Name="Header_DButton" Style="{StaticResource HeaderBStickyButton}"/>
                    <Canvas x:Name="Header_DCanvas" Style="{StaticResource HeaderDAutoFadeElement}">
                        <Canvas.Resources>
                        <!--HeaderDCvAnonPanel-->
                        <Style x:Key="HeaderDCvAnonPanel" BasedOn="{StaticResource BAutoCollapsedElement}" TargetType="{x:Type StackPanel}">
                                <Setter Property="IsEnabled" Value="{Binding IsAuthenticated, Converter={StaticResource BooleanInverter}}"/>
                                <Setter Property="Focusable" Value="False"/>
                            </Style>
                        <!--HeaderDCvAccPanel-->
                        <Style x:Key="HeaderDCvAccPanel" BasedOn="{StaticResource BAutoCollapsedElement}" TargetType="{x:Type StackPanel}">
                                <Setter Property="IsEnabled" Value="{Binding IsAuthenticated}"/>
                                <Setter Property="Focusable" Value="False"/>
                            </Style>
                        <!--HeaderDCvAdminPanel-->
                        <Style x:Key="HeaderDCvAdminPanel" BasedOn="{StaticResource BAutoCollapsedElement}" TargetType="{x:Type StackPanel}">
                                <Setter Property="IsEnabled" Value="{Binding IsAdmin}"/>
                                <Setter Property="Focusable" Value="False"/>
                            </Style>
                    </Canvas.Resources>
                        <Border Style="{StaticResource BMenuBorder}">
                            <StackPanel Margin=" 0 10 0 8">
                                <StackPanel Style="{StaticResource HeaderDCvAdminPanel}">
                                    <Label Content="Management" Style="{StaticResource BContextMenuHeader}"/>
                                    <Button Command="{Binding AccountsCmd}" Style="{StaticResource BContextMenuButton}">
                                        <Label Content="Accounts" Style="{StaticResource BContextMenuTitle}"/>
                                    </Button>
                                    <Button Command="{Binding RolesCmd}" Style="{StaticResource BContextMenuButton}">
                                        <Label Content="Roles" Style="{StaticResource BContextMenuTitle}"/>
                                    </Button>
                                    <Separator Focusable="False" Template="{StaticResource BContextMenuSeparatorTemplate}"/>
                                </StackPanel>
                                <StackPanel Style="{StaticResource HeaderDCvAnonPanel}">
                                    <Label Content="Account" Style="{StaticResource BContextMenuHeader}"/>
                                    <Button Command="{Binding SignInCmd}" Style="{StaticResource BContextMenuButton}">
                                        <Label Content="Sign in.." Style="{StaticResource BContextMenuTitle}"/>
                                    </Button>
                                    <Button Command="{Binding RegisterCmd}" Style="{StaticResource BContextMenuButton}">
                                        <Label Content="Create.." Style="{StaticResource BContextMenuTitle}"/>
                                    </Button>
                                </StackPanel>
                                <StackPanel Style="{StaticResource HeaderDCvAccPanel}">
                                    <Label Content="Account" Style="{StaticResource BContextMenuHeader}"/>
                                    <Button Command="{Binding ChangePasswordCmd}"  Style="{StaticResource BContextMenuButton}">
                                        <Label Content="Change password" Style="{StaticResource BContextMenuTitle}"/>
                                    </Button>
                                    <Button Command="{Binding LogOutCmd}" Style="{StaticResource BContextMenuButton}">
                                        <Label Content="Quit.." Style="{StaticResource BContextMenuTitle}"/>
                                    </Button>
                                </StackPanel>
                            </StackPanel>
                        </Border>
                    </Canvas>
                </StackPanel>
            </DockPanel>
        </Grid>
    </ControlTemplate>

    <!--SOCIAL-BAR-->
    <ControlTemplate x:Key="SocialBarTemplate">
        <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
            <Grid.Resources>
                <!--SBar-->
                <Style x:Key="SBar" TargetType="{x:Type DockPanel}">
                    <Setter Property="Background" Value="{StaticResource BTransparent}"/>
                    <Setter Property="HorizontalAlignment" Value="Center"/>
                    <Setter Property="VerticalAlignment" Value="Center"/>
                    <Setter Property="Margin" Value="50 0"/>
                </Style>
                <!--SBarButton-->
                <Style x:Key="SBarButton" TargetType="Button">
                    <Style.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="RenderTransformOrigin" Value="0.5, 0.5"/>
                            <Setter Property="RenderTransform"><Setter.Value><ScaleTransform ScaleX="0.9" ScaleY="0.9"/></Setter.Value></Setter>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="RenderTransformOrigin" Value="0.5, 0.5"/>
                            <Setter Property="RenderTransform"><Setter.Value><ScaleTransform ScaleX="0.85" ScaleY="0.85"/></Setter.Value></Setter>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="BorderBrush" Value="{x:Null}"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Focusable" Value="False"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush">
                                <Setter.Value>
                                    <SolidColorBrush Opacity="0.4" Color="{Binding RelativeSource={RelativeSource FindAncestor, 
                                        AncestorType={x:Type Button}}, Path=Background, Converter={StaticResource BrushToColorConverter}}"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </Style.Triggers>
                    <Setter Property="Command" Value="{Binding LoadUrlCmd}"/>
                    <Setter Property="Background" Value="{StaticResource BTransparent}"/>
                    <Setter Property="Foreground" Value="{StaticResource BTransparent}"/>
                    <Setter Property="HorizontalAlignment" Value="Stretch"/>
                    <Setter Property="VerticalAlignment" Value="Stretch"/>
                    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                    <Setter Property="BorderThickness" Value="0"/>
                    <Setter Property="BorderBrush" Value="{x:Null}"/>
                    <Setter Property="Margin" Value="6"/>
                    <Setter Property="Cursor" Value="Hand"/>
                    <Setter Property="Height" Value="40"/>
                    <Setter Property="Width" Value="40"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="Button">
                                <Border x:Name="Halo" BorderThickness="4" Margin="-4" CornerRadius="6" 
                                        BorderBrush="{TemplateBinding BorderBrush}" Background="{Binding ElementName=Halo, Path=BorderBrush}">
                                    <Border CornerRadius="5" Background="{TemplateBinding Background}">
                                        <ContentPresenter/>
                                    </Border>
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
                <!--SBarIcon-->
                <Style x:Key="SBarIcon" TargetType="{x:Type fa:ImageAwesome}">
                    <Setter Property="PrimaryColor" Value="{StaticResource BWhite}"/>
                    <Setter Property="Height" Value="15"/>
                    <Setter Property="Width" Value="15"/>
                </Style>
            </Grid.Resources>
            <DockPanel x:Name="SBar" Style="{StaticResource SBar}">
                <Button x:Name="SBar_VK" Background="{StaticResource BVk}" CommandParameter="https://vk.com/svyatrozhkov" Style="{StaticResource SBarButton}">
                    <fa:ImageAwesome Icon="Brands_Vk" Style="{StaticResource SBarIcon}"/>
                </Button>
                <Button x:Name="SBar_Telegram" Background="{StaticResource BTelegram}" CommandParameter="https://t.me/svyatseverskiy" Style="{StaticResource SBarButton}">
                    <fa:ImageAwesome Icon="Brands_Telegram" Style="{StaticResource SBarIcon}"/>
                </Button>
                <Button x:Name="SBar_Instagram" Background="{StaticResource BInstagram}" CommandParameter="https://instagr.am/svyatrozhkov" Style="{StaticResource SBarButton}">
                    <fa:ImageAwesome Icon="Brands_Instagram" Style="{StaticResource SBarIcon}"/>
                </Button>
                <Button x:Name="SBar_WhatsApp" Background="{StaticResource BWhatsApp}" CommandParameter="https://wa.me/79134013111" Style="{StaticResource SBarButton}">
                    <fa:ImageAwesome Icon="Brands_Whatsapp" Style="{StaticResource SBarIcon}"/>
                </Button>
                <Button x:Name="SBar_GitHub" Background="{StaticResource BGitHub}" CommandParameter="https://github.com/rozhkovsvyat" Style="{StaticResource SBarButton}">
                    <fa:ImageAwesome Icon="Brands_Github" Style="{StaticResource SBarIcon}"/>
                </Button>
            </DockPanel>
        </Grid>
    </ControlTemplate>

    <!--FOOTER-->
    <ControlTemplate x:Key="FooterTemplate">
        <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
            <Grid.Resources>
                <!--SbxFooter-->
                <Style x:Key="SbxFooter" TargetType="{x:Type DockPanel}">
                    <Setter Property="Background" Value="{StaticResource BTransparent}"/>
                    <Setter Property="HorizontalAlignment" Value="Center"/>
                    <Setter Property="VerticalAlignment" Value="Center"/>
                    <Setter Property="Margin" Value="50 0"/>
                </Style>
                <!--SbxFooterText-->
                <Style x:Key="SbxFooterText" TargetType="{x:Type TextBlock}">
                    <Setter Property="Foreground" Value="{StaticResource BTextWhite}"/>
                    <Setter Property="HorizontalAlignment" Value="Center"/>
                    <Setter Property="VerticalAlignment" Value="Center"/>
                    <Setter Property="Text" Value="© 2023 Made for"/>
                    <Setter Property="FontFamily" Value="Segoe UI"/>
                    <Setter Property="FontSize" Value="16"/>
                    <Setter Property="IsHitTestVisible" Value="False"></Setter>
                    <Setter Property="Background" Value="Transparent"></Setter>
                </Style>
                <!--SbxFooterButton-->
                <Style x:Key="SbxFooterButton" TargetType="Button">
                    <Style.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="RenderTransformOrigin" Value="0.5, 0.5"/>
                            <Setter Property="RenderTransform"><Setter.Value><ScaleTransform ScaleX="0.96" ScaleY="0.96"/></Setter.Value></Setter>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="BorderBrush" Value="{x:Null}"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Focusable" Value="False"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush">
                                <Setter.Value>
                                    <SolidColorBrush Opacity="0.4" Color="{Binding RelativeSource={RelativeSource FindAncestor, 
                                        AncestorType={x:Type Button}}, Path=Background, Converter={StaticResource BrushToColorConverter}}"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </Style.Triggers>
                    <Setter Property="Background" Value="{StaticResource BWhite}"/>
                    <Setter Property="Command" Value="{Binding LoadUrlCmd}"/>
                    <Setter Property="CommandParameter" Value="https://skillbox.ru/"/>
                    <Setter Property="Margin" Value="1 5 0 0"/>
                    <Setter Property="HorizontalAlignment" Value="Stretch"/>
                    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                    <Setter Property="VerticalAlignment" Value="Stretch"/>
                    <Setter Property="BorderThickness" Value="0"/>
                    <Setter Property="BorderBrush" Value="{x:Null}"/>
                    <Setter Property="Cursor" Value="Hand"/>
                    <Setter Property="Height" Value="23.5"/>
                    <Setter Property="Width" Value="52"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="Button">
                                <Border x:Name="Halo" BorderThickness="3" CornerRadius="8" 
                                        BorderBrush="{TemplateBinding BorderBrush}" Background="{Binding ElementName=Halo, Path=BorderBrush}">
                                    <Border CornerRadius="6" Background="{TemplateBinding Background}">
                                        <ContentPresenter/>
                                    </Border>
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
                <!--SbxFooterPath-->
                <Style x:Key="SbxFooterPath" TargetType="{x:Type Path}">
                    <Style.Resources>
                        <PathGeometry x:Key="SbxPathGeometry" Figures="M13.7959 15.6815C13.7959 19.1368 11.0442 21.6426 6.67334 21.6426C4.1389 21.5724 1.73709 20.4944 0 18.6476L1.46179 17.0309C2.82998 18.3336 4.43982 19.5997 6.64441 19.5997C9.0932 19.5997 11.7334 18.2264 11.7334 15.7606C11.7334 13.7126 10.1057 12.3767 6.68525 11.3233C2.78744 10.1321 0.807471 8.51546 0.807471 5.47617C0.807471 2.46836 3.35326 0 6.9805 0C9.68966 0 11.3846 1.15462 13.0344 2.63003L11.5973 4.2254C10.1508 2.94399 8.77242 2.07526 7.0809 2.07526C4.98267 2.07526 2.91166 3.42814 2.91166 5.37577C2.91166 7.14046 3.92589 8.26446 7.50633 9.36037C10.7856 10.3703 13.7959 11.9351 13.7959 15.6806V15.6815ZM31.488 1.99285C31.488 2.94049 32.256 3.70871 33.2034 3.70871C33.6584 3.70893 34.0948 3.52823 34.4165 3.20639C34.7383 2.88456 34.9189 2.44799 34.9187 1.99285C34.9187 1.04521 34.1507 0.276995 33.2034 0.276995C32.256 0.276995 31.488 1.04521 31.488 1.99285ZM48.0876 0.628674H46.0199V21.3037H48.0876V0.628674ZM52.9131 20.6155C52.9131 20.6155 54.186 21.6493 58.4267 21.6493L58.4241 21.6485C62.6104 21.6485 66.0079 18.587 66.0079 14.4042C66.0079 10.2213 62.6129 7.17183 58.4267 7.17183C57.2392 7.14003 56.0603 7.38105 54.9807 7.87634V0.628674H52.9131V20.6155ZM68.4219 14.4223C68.4216 18.607 71.8138 21.9996 75.9988 22.0001C80.184 22.0001 83.577 18.6078 83.5774 14.4229C83.5774 10.2382 80.1849 6.84586 75.9999 6.8457C71.815 6.84555 68.4222 10.2377 68.4219 14.4223ZM96.115 21.3101H98.8139L92.8468 14.2028L98.4115 7.53711H95.7279L91.5016 12.5998L87.2541 7.53711H84.5552L90.1598 14.2121L84.2344 21.3101H86.9172L91.5042 15.8152L96.115 21.3101ZM76.0118 8.89146C73.7799 8.89112 71.7675 10.2354 70.9133 12.2973C70.059 14.3593 70.531 16.7328 72.1092 18.311C73.6874 19.8892 76.061 20.3613 78.1229 19.507C80.1849 18.6527 81.5292 16.6404 81.5288 14.4085C81.5283 11.3617 79.0586 8.89193 76.0118 8.89146ZM58.4264 9.24374C57.1917 9.2611 55.9908 9.65017 54.9804 10.3602V18.8937C56.0513 19.4142 57.2378 19.6515 58.4264 19.583C61.4708 19.583 63.94 17.4556 63.94 14.4134C63.94 11.3712 61.4683 9.24289 58.4239 9.24289L58.4264 9.24374ZM39.1289 0.628906H41.1965V21.3039H39.1289V0.628906ZM26.3769 21.3055L19.1445 14.0731L25.6919 7.52148H28.6155L22.0681 14.0731L29.3005 21.3055H26.3769ZM17.0704 0.628674V21.3037H19.138V0.628674H17.0704ZM32.2422 21.3055H34.3098V7.52148H32.2422V21.3055Z"/>
                    </Style.Resources>
                    <Setter Property="Data" Value="{StaticResource SbxPathGeometry}"/>
                    <Setter Property="Fill" Value="{StaticResource BBlack}"/>
                    <Setter Property="Margin" Value="10"/>
                </Style>
            </Grid.Resources>
            <Grid Background="Transparent">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                        <i:InvokeCommandAction Command="{Binding  RelativeSource={RelativeSource FindAncestor, 
                            AncestorType={x:Type views:View}}, Path=DragCmd}" PassEventArgsToCommand="True"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </Grid>
            <DockPanel x:Name="SbxFooter" Style="{StaticResource SbxFooter}">
                <TextBlock x:Name="SbxFooter_Text" Style="{StaticResource SbxFooterText}"/>
                <Button x:Name="SbxFooter_Button" Style="{StaticResource  SbxFooterButton}">
                    <Viewbox><Path Style="{StaticResource SbxFooterPath}"/></Viewbox>
                </Button>
            </DockPanel>
        </Grid>
    </ControlTemplate>

</ResourceDictionary>
